info.json Errors and Analysis
Gary Griswold, Aug 25, 2018

Major Problems:

There were 6 info.json files that would not parse as JSON.  In each case, the problem
was easy to identify.  Most of the problems appeared to be random editing as if a computer 
program had edited the files by character postions without parsing the JSON.  In one case, 
(LSIBSM), the problem appeared to be that " was a valid character in the language, 
and needed to be escaped.  Most files contained one or two errors, but KDJSBU contain 
a very large number of similar errors.  All of the problems was corrected on my laptop.

Could not parse Invalid \escape: line 31 column 20 (char 2499) text|C2ESV|C2ESV|info.json
Could not parse Invalid \escape: line 76 column 7 (char 9691) text|TPIPNG|info.json
Could not parse Invalid \escape: line 76 column 8 (char 10814) text|TPIPNG|TPIPNG|info.json
Could not parse Invalid \escape: line 32 column 9 (char 2103) text|KDJBSU|KDJBSU|info.json
Could not parse Expecting ',' delimiter: line 29 column 43 (char 1432) text|LSIBSM|LSIBSM|info.json
Could not parse Invalid \escape: line 41 column 8 (char 4735) text|PRKBSM|PRKBSM|info.json

Each info.json file contained an Id, which turned out to not be a unique identifier.
There are 218 json.info bibleIds that exist in two info.json files.  When this occurred
the two info.json files with the same Id appearred to be the same language, but each such
info.json file referred to a different set of objects.  That is, it was a different fileset.

I only need one fileset for each Id, and so I looked for a way to pare it down to make Id unique.
There are 5 text info.json files with 5 parts (as divided by /)
There are 206 text info.json files with 3 parts (as divided by /)
There are 1128 text info.json files with 4 parts (as divided by /)
In every case of the duplicates, there is one of the two that consists of 4 parts.
So, I concluded that it is correct to only use the ones that consist of 4 parts.

However, afer eliminating all of the filesets with 5 part names and 3 part names, I found
that there were still 9 duplicates.  For 8 of them, I was able to identify a better file,
and so I removed the less good one from my set of info.json files.  For, one AZEBSA, the two 
files seemed to refer to two different, but related languages, or to one language but one was
in Arabic Script and the other in Latin.  Although, the one in Arabic script was marked Latin script.
I kept both copies of AZEBSA, but removed the lesser of each of the others

bibleId= AZEBSA first= text:AZEBSA:AZEBSA:info.json next= text:AZJBSA:AZEBSA:info.json They are two different,
but related languages.  One is Latin/ltr and the other Arabic/rtl, but they are both marked rtl

bibleId= DGABSG first= text:DGABSG:DGABSG:info.json BEST= text:DGANEW:DGABSG:info.json BEST is more complete
bibleId= GRTBBS first= BEST:GRTBBS:GRTBBS:info.json next= text:GUDBSCI:GUDBSC:info.json BEST is more localized
bibleId= IJCBSN first= text:IJCNEW:IJCBSN:info.json BEST= text:IJCBSN:IJCBSN:info.json They are the SAME
bibleId= MLYBSM BEST= text:ZLMTMV:ZLMBSM:info.json next= text:ZLMTMV:MLYBSM:info.json BEST has country code
bibleId= RONERV first= text:RONWTC:RONWTC:info.json BEST= text:RONWTC:RONERV:info.json BEST uses 3 usfm book codes
bibleId= SPNWTC BEST= text:SPNWTC:SPNWTC:info.json next= text:SPAWTC:SPNWTC:info.json BEST has correct lang code
bibleId= TGKIBT first= text:TGKIBT:TGKIBT:info.json BEST= text:TGKIBC:TGKIBC:info.json BEST is more localized
bibleId= ZCAWYI BEST= text:ZCAWBT:ZCAWYI:info.json next= text:ZCAWYI:ZCAWYI:info.json BEST is more complete

After removing all of the info.json files that consisted of 3 or 5 parts. Almost all of the remaining filesets
used 3 character USFM book codes.  However, there were two that did not, but these used a two character book code.
I assume that the two character code is an older scheme, not sure.  But, both of the info.json files with 
2 character book codes was kept.

text/SUSFBI/SUSAPB/info.json
text/ENGESV/ENGESV/info.json

Comparison to DBP V4.

I compared the table of Bible records that was created from these info.json files with
a json file of Bibles that was pulled down from DBP v4.  By, matching on the Id from the
two systems, I was able to use what appeared to be more current data from DBPv4, and I
performed the following number of updates:

iso3 UpdateCount= 1
name UpdateCount= 462
englishName UpdateCount= 684
Id mismatchCount = 1013 // This seems very high, but I think that is because the file of Bibles
that I am reading is not just text, but also audio.

Minor Problems:

Most of the info.json files contain all of the same data and are formatted the same way
as if they were generated by a computer program.  ENGESV was different, and is missing
many fields, but this doesn't seem to be a problem, just a difference.

nameEnglish is absent from ENGESV
hasLemma is absent from ENGESV
fontClass is absent for ENGESV
script is absent for ENGESV
dialectCode is absent for ENGESV
audioDirectory is absent for ENGESV

Also, name is absent for BULB40

Observations about the data:

haiola_id == id in every case except ENGESV, where it is absent
type == 'bible' in every file
abbr is always equal to id
dir is always ltr or rtl
lang is sometimes uppercase and sometimes lowercase, I need will convert to lowercase
dialectCode[0:3] is always equal to lang
dialectCode[3:] is always 'Latin', which is not correct
audioDirectory is always the same as Id
the first part of a filename is text or audio

Language code exists on its own, but is also part of the Id, and the second and
third part of the name.  I can understand that this has happened, because FCBH
has or has had in the past language codes of their own that are different from
iso-639-3 SIL language codes.

The following are some observations about these similarities:

lang is different than id[0:3] only 26 times
lang is different than the second part of filename 53 times
lang is different than the third part of filename 28 times

the second part of the filename is the same as Id, except about 80 times

the third part of the filename is almost always the same at the Id, but there are 3 exceptions:
	bibleId= AMPWBT someId= AM1WBT bibleId=fileId lang= amp (appears to be a lang difference, usually done in fileId)
	bibleId= MLYBSM fileId= ZLMTMV someId= ZLMBSM lang= mly
	bibleId= GRTBBS fileId= GUDBSCI someId= GUDBSC lang= grt (this one is a duplicate GRTBBS)


